%% Main
clear;
clc;
startup_rvc;
load hershey;

%% take inputs
ask_string = "Enter String\n";
item = input(ask_string,"s");
n = strlength(item);
scale = 0.04;
zheight = 30;

ask_x = 'Enter x value for translation\n';
x = input(ask_x)/1000;
ask_y = 'Enter y value for translation\n';
y = input(ask_y)/1000;
ask_theta = 'Enter theta in degrees for rotation\n';
theta = deg2rad(input(ask_theta));

%% Generate trajectories
traj = [];
if item(n)== '='
    traj = operation(item,n,hershey,traj,scale);
else
    traj = alphanum(item,n,hershey,traj,scale,1);
end
traj = transform(x,y,theta,traj);
traj = traj*1000;
plot3(traj(:,1),traj(:,2),traj(:,3));

%% -----------------------------------------------------------Operations ---------------------------------------------------
function traj = operation(input,n,hershey,traj,scale)

% Parse input
nums = [];
operations = '';
temp = '';
counter = 1;
for i=1:n
    if isnan(str2double(input(i)))
        operations(counter) = input(i);
        nums(counter) = str2double(temp);
        counter = counter + 1;
        temp = '';
    else
        temp = strcat(temp,input(i));

    end
end

% Find result
result = 0;
switch operations(1)
    case '+'
        result = nums(1)+nums(2);
    case '-'
        result = nums(1)-nums(2);
    case '*'
        result = nums(1)*nums(2);
        operations(1) = 'x';
end
nums(3) = result;

% Find longest value
longest = strlength(int2str(max(nums)));

% Calculate offsets
offsets = zeros(3,3);
for a=1:3
    dif = longest - strlength(int2str(nums(a)));
    offsets(:,a) = [dif*scale;-1*a*scale;0];
end

% Generate lines
lines = cell(1,3);
lines{1} = int2str(nums(1));
lines{2} = strcat(int2str(nums(2)),operations(1));
lines{3} = int2str(nums(3));

% Create trajectory
for l=1:3
    newtraj = [];
    ln = length(lines{l});
    newtraj = alphanum(lines{l},ln,hershey,newtraj,scale,2);
    newtraj = newtraj+offsets(:,l)';
    traj = [traj;newtraj];
end

end

%% --------------------------------------------------- Transform -----------------------------------------------------------
function traj = transform(x,y,theta,traj)
R = [ cos(theta) -sin(theta);sin(theta) cos(theta)];
transformed_traj = R*[traj(:,1) traj(:,2)]'+[x;y];
traj = [transformed_traj(1,:)' transformed_traj(2,:)' traj(:,3)];
end

%% --------------------------------------------- New path -------------------------------------------------------------
function path = newpath(character,scale)
path = [scale*character.stroke;zeros(1,numcols(character.stroke))];
k = find(isnan(path(1,:)));
path(:,k) = path(:,k-1); path(3,k) = 0.2*scale;
endstroke = [path(1,end);path(2,end);0.01];
path = [path endstroke];
end

%% --------------------------------------- Alphanum ---------------------------------------------------------------------
function traj = alphanum(input,n,hershey,traj,scale,type)
for i=1:n
    character = hershey{input(i)};
    path = newpath(character,scale);
    if isempty(traj) == true
        offset = [0;0;0];
    elseif type == 1
        offset = [traj(end,1)+0.4*scale;0;0];
    else
        offset = [(i-1)*scale;0;0];
    end
    path = path'+offset';
    traj = [traj;path];
end
end

%% --------------------------------------- Connect to VM ----------------------------------------------------------------
% % TCP Host and Port settings
host = '192.168.0.100'; % THIS IP ADDRESS MUST BE USED FOR THE VIRTUAL BOX VM
port = 30003;

% Calling the constructor of rtde to setup tcp connction
rtde = rtde(host,port);

% Setting home
home = [-588.53, -133.30, 227.00, 2.221, 2.2221, 0.00];

poses = rtde.movej(home);
% Creating a path array
path = [];

% setting move parameters
v = 0.5;
a = 1.2;
blend = 0.0005;

% Populate the path array
for i = 1:length(traj)
    disp(i);
    disp(traj(i,1:3) + [-588.53, -133.30 100]);
    point = [[(traj(i,1:3) + [-588.53, -350 zheight]),(home(4:6))],a,v,0,blend];
    if isempty(path)
        path = point;
    else
        path = cat(1,path,point);
    end
end

% Execute the movement!
poses = rtde.movej(path);

rtde.drawPath(poses);

rtde.close;
